When would you want ot create a remote repository rather than keeping all your work local?
 	I would like to create a remote repository when I want to share my work with others, I can keep the part I am still working on and not ready for public private and only share or push the branch which is ready for share to the public repository. I would aslo need a remote repository when I work with other programmers collaboratively on the same project. 
  
Describe the differences between forks, clones, and branches. When would you use one instead of another?
	Forks is a feature of github to clone a someone's repository to your own account in github. You can push an pull commits from this fork and the afer pull commits from the fork, the fork becomes the origin or remote repository of your local repository. Changes made in the fork will affect or appear in the someone else's original repository. 
	clones are copy and repositories from github or from other local positions. Clones copy not only all files in that repoitory, but also all history commits in the repository. Branches are created within the same repository, when the new commits are made and there is parents for them to recall. Branches are labels for commits. 

What is the benefit of having a copy of the last known of the remote stored locally?
	Use git fetch will update the origin/master branch sync with the remote repositories. If you will be offline a while, you can get access to most recent version of the remote repository by updating the local copy of the remote version. You can also fix the conflict by git diff origin/master master before merging origin/master and master locally. After merging, you can use git push the sync the remote erpository in github. 
	
How would you collaborate with using Git or GitHub? What would be easier? and what would be harder? 
	If I want to add some feature or fix a bug, I would like ot create a new branch and store the change on the new branch before merging it to the master branch. I would push this branch to the remote repository, and create a pull request to send to colaborators to have them check this change out to decide if it is ready for merging to the master branch in github. Collaborators would give feedback to me if there is anything wrong or conflict need to be fixed before mergining. Then I would fix errors locally and push it to github, the pull request would automatically updated with the fix commits. They could click merge pull request when it is ready to merge to the master branch. 

When would you want ot make changes in a seperate branch rather than directly in master? What benefits does each approach have?
	It is better to make sure the changes are perfectly prepared for merging before make a commit to merge. By creating a new branch and push changes in the new branch, I can create a pull request to ask the collaborators to check out my change. If there the collaborators also made a change which made a conflict in the pull request, github would show that there is a conflect. I can use gi fetch to have a look what changes did they made and resolve the conflict and merge the it with master branch, and then check out the new branch(different-oil) and merge the diferent-oil with master branch and push differnt-oil to origin, then the buttom of merging on github would become green, whcih means it is ready for merging. 